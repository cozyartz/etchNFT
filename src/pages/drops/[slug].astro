---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getDropBySlug, getDropItems } from '../../lib/drops';

const db = Astro.locals.runtime.env.DB as D1Database;
const slug = Astro.params.slug;

if (!slug) {
  return Astro.redirect('/drops');
}

const drop = await getDropBySlug(db, slug);
if (!drop) {
  return Astro.redirect('/drops');
}

const items = await getDropItems(db, drop.id);
const availableItems = items.filter(item => item.is_available && !item.is_sold && item.laser_file_status === 'ready');

// Check drop status
const now = new Date();
const isUpcoming = drop.launch_date && drop.launch_date > now;
const isLive = drop.is_active && (!drop.launch_date || drop.launch_date <= now) && (!drop.end_date || drop.end_date > now);
const isEnded = drop.end_date && drop.end_date <= now;

let statusText = 'Draft';
let statusClass = 'text-gray-400';
if (isUpcoming) {
  statusText = 'Upcoming';
  statusClass = 'text-yellow-400';
} else if (isLive) {
  statusText = 'Live';
  statusClass = 'text-green-400';
} else if (isEnded) {
  statusText = 'Ended';
  statusClass = 'text-red-400';
}
---

<BaseLayout title={`${drop.name} - EtchNFT Drops`} description={drop.description}>
  <section class="hero-gradient min-h-screen px-6 py-12">
    <div class="max-w-7xl mx-auto">
      <!-- Back Button -->
      <div class="mb-8">
        <a 
          href="/drops"
          class="inline-flex items-center gap-2 text-gray-400 hover:text-white transition-colors font-cyber"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
          Back to Drops
        </a>
      </div>

      <!-- Drop Header -->
      <div class="glass-strong p-8 mb-8">
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div>
            <div class="aspect-square bg-retro-darker rounded-lg overflow-hidden mb-6">
              <img 
                src={drop.image_url || '/placeholder-nft.png'} 
                alt={drop.name}
                class="w-full h-full object-cover"
              />
            </div>
          </div>
          
          <div>
            <div class="flex items-center gap-3 mb-4">
              <span class={`px-3 py-1 text-sm rounded-full font-semibold ${statusClass} border border-current`}>
                {statusText}
              </span>
              {drop.is_featured && (
                <span class="px-3 py-1 text-sm rounded-full font-semibold text-primary border border-primary">
                  Featured
                </span>
              )}
            </div>
            
            <h1 class="text-4xl font-cyber font-bold text-white mb-4">{drop.name}</h1>
            
            {drop.description && (
              <p class="text-gray-300 text-lg mb-6">{drop.description}</p>
            )}
            
            <div class="grid grid-cols-2 gap-4 mb-6">
              <div class="card-retro p-4 text-center">
                <div class="text-2xl font-cyber font-bold text-primary mb-1">${drop.price_usd}</div>
                <div class="text-gray-400 text-sm">Price</div>
              </div>
              <div class="card-retro p-4 text-center">
                <div class="text-2xl font-cyber font-bold text-white mb-1">{availableItems.length}</div>
                <div class="text-gray-400 text-sm">Available</div>
              </div>
              <div class="card-retro p-4 text-center">
                <div class="text-2xl font-cyber font-bold text-white mb-1">{drop.total_supply}</div>
                <div class="text-gray-400 text-sm">Total Supply</div>
              </div>
              <div class="card-retro p-4 text-center">
                <div class="text-2xl font-cyber font-bold text-white mb-1">{drop.minted_supply}</div>
                <div class="text-gray-400 text-sm">Sold</div>
              </div>
            </div>
            
            <div class="space-y-3 mb-6">
              <div class="flex items-center justify-between text-sm">
                <span class="text-gray-400">Product Type:</span>
                <span class="text-white capitalize">{drop.product_type}</span>
              </div>
              <div class="flex items-center justify-between text-sm">
                <span class="text-gray-400">Material:</span>
                <span class="text-white capitalize">{drop.material}</span>
              </div>
              <div class="flex items-center justify-between text-sm">
                <span class="text-gray-400">Dimensions:</span>
                <span class="text-white">{drop.dimensions}</span>
              </div>
              {drop.launch_date && (
                <div class="flex items-center justify-between text-sm">
                  <span class="text-gray-400">Launch Date:</span>
                  <span class="text-white">{drop.launch_date.toLocaleDateString()}</span>
                </div>
              )}
              {drop.end_date && (
                <div class="flex items-center justify-between text-sm">
                  <span class="text-gray-400">End Date:</span>
                  <span class="text-white">{drop.end_date.toLocaleDateString()}</span>
                </div>
              )}
            </div>
            
            {isLive && availableItems.length > 0 && (
              <div class="text-center">
                <p class="text-gray-400 text-sm mb-4">Choose an item below to purchase</p>
                <div class="text-green-400 font-cyber text-sm flex items-center justify-center gap-2">
                  <span class="animate-pulse">●</span>
                  <span>DROP IS LIVE</span>
                  <span class="animate-pulse">●</span>
                </div>
              </div>
            )}
            
            {isUpcoming && drop.launch_date && (
              <div class="text-center">
                <p class="text-yellow-400 font-cyber text-sm mb-2">Coming Soon</p>
                <p class="text-gray-400 text-sm">
                  Launches on {drop.launch_date.toLocaleDateString()} at {drop.launch_date.toLocaleTimeString()}
                </p>
              </div>
            )}
            
            {isEnded && (
              <div class="text-center">
                <p class="text-red-400 font-cyber text-sm">This drop has ended</p>
              </div>
            )}
            
            {isLive && availableItems.length === 0 && (
              <div class="text-center">
                <p class="text-red-400 font-cyber text-sm">All items have been sold</p>
              </div>
            )}
          </div>
        </div>
      </div>

      <!-- Items Grid -->
      {availableItems.length > 0 && (
        <div class="glass-strong p-8">
          <h2 class="text-3xl font-cyber font-bold text-white mb-8 text-center">
            Available Items
          </h2>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {availableItems.map(item => (
              <div class="card-retro p-6 group hover:scale-105 transition-all duration-300">
                <div class="aspect-square bg-retro-darker rounded-lg mb-4 overflow-hidden">
                  <img 
                    src={item.original_image_url} 
                    alt={item.name}
                    class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300"
                    onerror="this.src='/placeholder-nft.png'"
                  />
                </div>
                
                <div class="mb-4">
                  <h3 class="text-lg font-cyber font-bold text-white mb-2">{item.name}</h3>
                  <p class="text-gray-400 text-sm mb-2">Token ID: #{item.token_id}</p>
                  
                  {item.description && (
                    <p class="text-gray-300 text-sm mb-3">{item.description}</p>
                  )}
                  
                  <div class="flex items-center justify-between text-sm">
                    <span class="text-green-400 font-semibold">Ready to Etch</span>
                    <span class="text-primary font-semibold">${drop.price_usd}</span>
                  </div>
                </div>
                
                {isLive ? (
                  <button 
                    class="w-full px-4 py-3 bg-primary text-black font-cyber font-semibold rounded-lg hover:bg-primary/80 transition-colors purchase-btn"
                    data-drop-id={drop.id}
                    data-item-id={item.id}
                    data-item-name={item.name}
                    data-price={drop.price_usd}
                  >
                    Purchase Now
                  </button>
                ) : (
                  <button 
                    class="w-full px-4 py-3 bg-gray-600 text-gray-300 font-cyber font-semibold rounded-lg cursor-not-allowed"
                    disabled
                  >
                    Not Available
                  </button>
                )}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  </section>

  <!-- Purchase Modal -->
  <div id="purchase-modal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden">
    <div class="flex items-center justify-center min-h-screen px-4">
      <div class="glass-strong p-8 max-w-md w-full">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-2xl font-cyber font-bold text-white">Purchase Item</h2>
          <button id="close-purchase-modal" class="text-gray-400 hover:text-white transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <div id="selected-item" class="mb-6">
          <!-- Item details will be populated here -->
        </div>

        <form id="purchase-form" class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">Full Name</label>
            <input 
              type="text" 
              name="customer_name" 
              required
              class="w-full px-4 py-3 bg-retro-dark border border-primary/30 text-white rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
              placeholder="Enter your full name"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">Email</label>
            <input 
              type="email" 
              name="customer_email" 
              required
              class="w-full px-4 py-3 bg-retro-dark border border-primary/30 text-white rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
              placeholder="Enter your email"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">Shipping Address</label>
            <input 
              type="text" 
              name="shipping_address_line" 
              required
              class="w-full px-4 py-3 bg-retro-dark border border-primary/30 text-white rounded-lg focus:border-primary focus:ring-1 focus:ring-primary mb-3"
              placeholder="Street address"
            />
            <div class="grid grid-cols-2 gap-3">
              <input 
                type="text" 
                name="shipping_city" 
                required
                class="w-full px-4 py-3 bg-retro-dark border border-primary/30 text-white rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
                placeholder="City"
              />
              <input 
                type="text" 
                name="shipping_country" 
                required
                class="w-full px-4 py-3 bg-retro-dark border border-primary/30 text-white rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
                placeholder="Country"
              />
            </div>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">Payment Method</label>
            <select 
              name="payment_method" 
              required
              class="w-full px-4 py-3 bg-retro-dark border border-primary/30 text-white rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
            >
              <option value="">Select payment method</option>
              <option value="card">Credit Card</option>
              <option value="crypto">Cryptocurrency</option>
            </select>
          </div>

          <div class="flex items-center justify-end gap-4 pt-6">
            <button 
              type="button" 
              id="cancel-purchase"
              class="px-6 py-3 text-gray-400 hover:text-white transition-colors font-cyber"
            >
              Cancel
            </button>
            <button 
              type="submit" 
              class="px-6 py-3 bg-primary text-black hover:bg-primary/80 transition-colors rounded-lg font-cyber font-semibold"
            >
              Proceed to Payment
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  // Purchase modal functionality
  const purchaseModal = document.getElementById('purchase-modal');
  const closePurchaseModal = document.getElementById('close-purchase-modal');
  const cancelPurchase = document.getElementById('cancel-purchase');
  const purchaseForm = document.getElementById('purchase-form') as HTMLFormElement;
  const selectedItemDiv = document.getElementById('selected-item');

  let selectedData = {
    drop_id: '',
    item_id: '',
    item_name: '',
    price: 0
  };

  // Purchase button click handlers
  document.querySelectorAll('.purchase-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      selectedData = {
        drop_id: target.getAttribute('data-drop-id') || '',
        item_id: target.getAttribute('data-item-id') || '',
        item_name: target.getAttribute('data-item-name') || '',
        price: parseFloat(target.getAttribute('data-price') || '0')
      };

      if (selectedItemDiv) {
        selectedItemDiv.innerHTML = `
          <div class="card-retro p-4">
            <h3 class="font-cyber font-bold text-white mb-2">${selectedData.item_name}</h3>
            <div class="flex items-center justify-between text-sm">
              <span class="text-gray-400">Price:</span>
              <span class="text-primary font-semibold">$${selectedData.price}</span>
            </div>
          </div>
        `;
      }

      purchaseModal?.classList.remove('hidden');
    });
  });

  closePurchaseModal?.addEventListener('click', () => {
    purchaseModal?.classList.add('hidden');
  });

  cancelPurchase?.addEventListener('click', () => {
    purchaseModal?.classList.add('hidden');
  });

  // Close modal when clicking outside
  purchaseModal?.addEventListener('click', (e) => {
    if (e.target === purchaseModal) {
      purchaseModal.classList.add('hidden');
    }
  });

  // Purchase form submission
  purchaseForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(purchaseForm);
    const data: any = Object.fromEntries(formData.entries());
    
    // Add selected item data
    data.drop_id = selectedData.drop_id;
    data.drop_item_id = selectedData.item_id;
    data.quantity = 1;
    
    // Format shipping address
    data.shipping_address = {
      line: data.shipping_address_line,
      city: data.shipping_city,
      country: data.shipping_country
    };
    
    // Remove individual shipping fields
    delete data.shipping_address_line;
    delete data.shipping_city;
    delete data.shipping_country;
    
    try {
      const response = await fetch('/api/drops/purchase', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        const result = await response.json();
        alert('Purchase initiated successfully! You will receive payment instructions via email.');
        purchaseModal?.classList.add('hidden');
        // TODO: Redirect to payment page or show payment options
      } else {
        const error = await response.json();
        alert('Error creating purchase: ' + error.error);
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error creating purchase');
    }
  });
</script>