---
import BaseLayout from '../../../../layouts/BaseLayout.astro';
import { requireUser } from '../../../../lib/auth';
import { getDrop, getDropItems } from '../../../../lib/drops';

const user = await requireUser(Astro);
const db = Astro.locals.runtime.env.DB as D1Database;

const dropId = Astro.params.id;
if (!dropId) {
  return Astro.redirect('/admin/drops');
}

const [drop, items] = await Promise.all([
  getDrop(db, dropId),
  getDropItems(db, dropId)
]);

if (!drop) {
  return Astro.redirect('/admin/drops');
}
---

<BaseLayout title={`${drop.name} Items - EtchNFT Admin`}>
  <section class="hero-gradient min-h-screen px-6 py-12">
    <div class="max-w-7xl mx-auto">
      <!-- Header -->
      <div class="glass-strong p-6 mb-8 scan-lines">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <img src="/etchlogo.png" alt="EtchNFT Logo" class="w-10 h-10 mr-4 animate-neon-pulse" />
            <div>
              <h1 class="text-3xl font-cyber font-bold text-white">{drop.name}</h1>
              <p class="text-gray-400 text-sm mt-1">Manage drop items and artwork</p>
            </div>
          </div>
          <div class="flex items-center gap-4">
            <a href="/admin/drops" class="px-4 py-2 text-sm border border-secondary text-secondary hover:bg-secondary hover:text-black transition-all duration-300 rounded-lg font-cyber">
              Back to Drops
            </a>
            <button 
              id="add-item-btn"
              class="px-4 py-2 text-sm bg-primary text-black hover:bg-primary/80 transition-all duration-300 rounded-lg font-cyber font-semibold"
            >
              Add Item
            </button>
          </div>
        </div>
      </div>

      <!-- Drop Info -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="card-retro p-6 text-center">
          <div class="text-2xl font-cyber font-bold text-primary mb-2">{items.length}</div>
          <div class="text-gray-400 text-sm tracking-wider">Total Items</div>
        </div>
        <div class="card-retro p-6 text-center">
          <div class="text-2xl font-cyber font-bold text-green-400 mb-2">{items.filter(i => i.laser_file_status === 'ready').length}</div>
          <div class="text-gray-400 text-sm tracking-wider">Ready to Etch</div>
        </div>
        <div class="card-retro p-6 text-center">
          <div class="text-2xl font-cyber font-bold text-yellow-400 mb-2">{items.filter(i => i.laser_file_status === 'processing').length}</div>
          <div class="text-gray-400 text-sm tracking-wider">Processing</div>
        </div>
        <div class="card-retro p-6 text-center">
          <div class="text-2xl font-cyber font-bold text-red-400 mb-2">{items.filter(i => i.laser_file_status === 'failed').length}</div>
          <div class="text-gray-400 text-sm tracking-wider">Failed</div>
        </div>
      </div>

      <!-- Items Grid -->
      <div class="glass-strong p-6">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-2xl font-cyber font-bold text-white">Drop Items</h2>
          <div class="flex items-center gap-4">
            <select id="status-filter" class="bg-retro-dark border border-primary/30 text-white px-3 py-2 rounded-lg text-sm">
              <option value="">All Status</option>
              <option value="pending">Pending</option>
              <option value="processing">Processing</option>
              <option value="ready">Ready</option>
              <option value="failed">Failed</option>
            </select>
            <button 
              id="bulk-process-btn"
              class="px-4 py-2 text-sm bg-secondary text-black hover:bg-secondary/80 transition-all duration-300 rounded-lg font-cyber font-semibold"
            >
              Process All
            </button>
          </div>
        </div>

        {items.length === 0 ? (
          <div class="text-center py-12">
            <div class="text-gray-400 text-lg mb-4">No items added yet</div>
            <button 
              id="add-first-item-btn"
              class="px-6 py-3 bg-primary text-black hover:bg-primary/80 transition-all duration-300 rounded-lg font-cyber font-semibold"
            >
              Add First Item
            </button>
          </div>
        ) : (
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {items.map(item => {
              let statusClass = 'bg-gray-400/20 text-gray-400';
              let statusText = item.laser_file_status;
              
              switch (item.laser_file_status) {
                case 'pending':
                  statusClass = 'bg-yellow-400/20 text-yellow-400';
                  statusText = 'Pending';
                  break;
                case 'processing':
                  statusClass = 'bg-blue-400/20 text-blue-400';
                  statusText = 'Processing';
                  break;
                case 'ready':
                  statusClass = 'bg-green-400/20 text-green-400';
                  statusText = 'Ready';
                  break;
                case 'failed':
                  statusClass = 'bg-red-400/20 text-red-400';
                  statusText = 'Failed';
                  break;
              }

              return (
                <div class="card-retro p-4">
                  <div class="aspect-square bg-retro-darker rounded-lg mb-4 overflow-hidden">
                    <img 
                      src={item.original_image_url} 
                      alt={item.name}
                      class="w-full h-full object-cover"
                      onerror="this.src='/placeholder-nft.png'"
                    />
                  </div>
                  
                  <div class="mb-3">
                    <h3 class="font-semibold text-white mb-1">{item.name}</h3>
                    <p class="text-gray-400 text-sm">#{item.token_id}</p>
                  </div>
                  
                  <div class="flex items-center justify-between mb-3">
                    <span class={`px-2 py-1 text-xs rounded-full font-semibold ${statusClass}`}>
                      {statusText}
                    </span>
                    {item.is_sold && (
                      <span class="px-2 py-1 text-xs rounded-full font-semibold bg-purple-400/20 text-purple-400">
                        Sold
                      </span>
                    )}
                  </div>
                  
                  <div class="flex items-center gap-2">
                    <button 
                      class="flex-1 text-xs px-3 py-2 bg-secondary text-black rounded-lg font-semibold hover:bg-secondary/80 transition-colors preview-btn"
                      data-item-id={item.id}
                    >
                      Preview
                    </button>
                    {item.laser_file_status === 'pending' && (
                      <button 
                        class="flex-1 text-xs px-3 py-2 bg-primary text-black rounded-lg font-semibold hover:bg-primary/80 transition-colors process-btn"
                        data-item-id={item.id}
                      >
                        Process
                      </button>
                    )}
                    {item.laser_file_status === 'ready' && (
                      <button 
                        class="flex-1 text-xs px-3 py-2 bg-green-500 text-white rounded-lg font-semibold hover:bg-green-600 transition-colors download-btn"
                        data-item-id={item.id}
                      >
                        Download
                      </button>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  </section>

  <!-- Add Item Modal -->
  <div id="add-item-modal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden">
    <div class="flex items-center justify-center min-h-screen px-4">
      <div class="glass-strong p-8 max-w-2xl w-full">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-2xl font-cyber font-bold text-white">Add New Item</h2>
          <button id="close-add-modal" class="text-gray-400 hover:text-white transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <form id="add-item-form" class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-2">Item Name</label>
              <input 
                type="text" 
                name="name" 
                required
                class="w-full px-4 py-3 bg-retro-dark border border-primary/30 text-white rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
                placeholder="Enter item name"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-2">Token ID</label>
              <input 
                type="text" 
                name="token_id" 
                required
                class="w-full px-4 py-3 bg-retro-dark border border-primary/30 text-white rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
                placeholder="Enter token ID"
              />
            </div>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">Description</label>
            <textarea 
              name="description" 
              rows="3"
              class="w-full px-4 py-3 bg-retro-dark border border-primary/30 text-white rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
              placeholder="Enter item description"
            ></textarea>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">Image URL</label>
            <input 
              type="url" 
              name="original_image_url" 
              required
              class="w-full px-4 py-3 bg-retro-dark border border-primary/30 text-white rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
              placeholder="https://example.com/image.png"
            />
          </div>

          <div class="flex items-center justify-end gap-4 pt-6">
            <button 
              type="button" 
              id="cancel-add-item"
              class="px-6 py-3 text-gray-400 hover:text-white transition-colors font-cyber"
            >
              Cancel
            </button>
            <button 
              type="submit" 
              class="px-6 py-3 bg-primary text-black hover:bg-primary/80 transition-colors rounded-lg font-cyber font-semibold"
            >
              Add Item
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  const dropId = window.location.pathname.split('/')[3];

  // Modal functionality
  const addItemBtn = document.getElementById('add-item-btn');
  const addFirstItemBtn = document.getElementById('add-first-item-btn');
  const addItemModal = document.getElementById('add-item-modal');
  const closeAddModal = document.getElementById('close-add-modal');
  const cancelAddItem = document.getElementById('cancel-add-item');
  const addItemForm = document.getElementById('add-item-form') as HTMLFormElement;

  [addItemBtn, addFirstItemBtn].forEach(btn => {
    btn?.addEventListener('click', () => {
      addItemModal?.classList.remove('hidden');
    });
  });

  closeAddModal?.addEventListener('click', () => {
    addItemModal?.classList.add('hidden');
  });

  cancelAddItem?.addEventListener('click', () => {
    addItemModal?.classList.add('hidden');
  });

  // Close modal when clicking outside
  addItemModal?.addEventListener('click', (e) => {
    if (e.target === addItemModal) {
      addItemModal.classList.add('hidden');
    }
  });

  // Add item form submission
  addItemForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(addItemForm);
    const data = Object.fromEntries(formData.entries());
    data.drop_id = dropId;
    
    try {
      const response = await fetch('/api/admin/drop-items', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        window.location.reload();
      } else {
        const error = await response.json();
        alert('Error adding item: ' + error.error);
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error adding item');
    }
  });

  // Load templates for processing
  let templates = [];
  
  async function loadTemplates() {
    try {
      const response = await fetch('/api/admin/templates');
      if (response.ok) {
        const result = await response.json();
        templates = result.templates || [];
      }
    } catch (error) {
      console.error('Error loading templates:', error);
    }
  }
  
  // Load templates on page load
  loadTemplates();

  // Process button functionality
  document.querySelectorAll('.process-btn').forEach(btn => {
    btn.addEventListener('click', async (e) => {
      const itemId = (e.target as HTMLElement).getAttribute('data-item-id');
      
      if (templates.length === 0) {
        alert('No templates available. Please add design templates first.');
        return;
      }
      
      // Show template selection modal
      const templateOptions = templates.map(t => 
        `<option value="${t.id}">${t.name} (${t.category})</option>`
      ).join('');
      
      const templateSelect = `
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-300 mb-2">Select Template</label>
          <select id="template-select" class="w-full px-4 py-3 bg-retro-dark border border-primary/30 text-white rounded-lg">
            ${templateOptions}
          </select>
        </div>
      `;
      
      const confirmed = confirm('Process this item for laser engraving?');
      if (!confirmed) return;
      
      // Use first template for now (in a real app, show selection modal)
      const templateId = templates[0].id;
      
      try {
        const response = await fetch('/api/admin/process-image', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            item_id: itemId,
            template_id: templateId,
            options: {
              contrast_enhancement: true,
              edge_detection: false
            }
          }),
        });

        if (response.ok) {
          const result = await response.json();
          alert(`Processing completed successfully! Quality: ${result.quality_metrics?.engraving_quality || 'unknown'}`);
          window.location.reload();
        } else {
          const error = await response.json();
          alert('Processing failed: ' + error.error);
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error processing image');
      }
    });
  });

  // Preview button functionality
  document.querySelectorAll('.preview-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const itemId = (e.target as HTMLElement).getAttribute('data-item-id');
      // For now, just show the original image in a modal
      alert('Preview functionality: Opening image in new tab');
      // Find the image URL from the page
      const itemCard = (e.target as HTMLElement).closest('.card-retro');
      const img = itemCard?.querySelector('img');
      if (img) {
        window.open(img.src, '_blank');
      }
    });
  });

  // Download button functionality
  document.querySelectorAll('.download-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const itemId = (e.target as HTMLElement).getAttribute('data-item-id');
      // For now, just show an alert
      alert('Download functionality will download the laser-ready SVG file');
    });
  });

  // Bulk process button
  document.getElementById('bulk-process-btn')?.addEventListener('click', async () => {
    if (templates.length === 0) {
      alert('No templates available. Please add design templates first.');
      return;
    }
    
    const confirmed = confirm('Process all pending items for laser engraving?');
    if (!confirmed) return;
    
    // Use first template for now
    const templateId = templates[0].id;
    
    try {
      const response = await fetch('/api/admin/batch-process', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          drop_id: dropId,
          template_id: templateId,
          options: {
            contrast_enhancement: true,
            edge_detection: false
          }
        }),
      });

      if (response.ok) {
        const result = await response.json();
        alert(result.message);
        window.location.reload();
      } else {
        const error = await response.json();
        alert('Batch processing failed: ' + error.error);
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error in batch processing');
    }
  });
</script>